package com.beegfs.admon.gui.components.internalframes.stats;


import com.beegfs.admon.gui.common.enums.FilePathsEnum;
import com.beegfs.admon.gui.common.enums.NodeTypesEnum;
import com.beegfs.admon.gui.common.nodes.Node;
import com.beegfs.admon.gui.common.tools.GuiTk;
import com.beegfs.admon.gui.components.internalframes.JInternalFrameInterface;
import com.beegfs.admon.gui.components.managers.FrameManager;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.TreeMap;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.SwingConstants;



public class JInternalFrameNodeStatus extends javax.swing.JInternalFrame implements
        JInternalFrameInterface
{
   private static final long serialVersionUID = 1L;

   private NodeTypesEnum nodeType= NodeTypesEnum.STORAGE;
   private final String group;

   private int labelsPerLine = 0;
   private int lineCount = 0;

   private final Object lockStatusVals = new Object();
   private final ArrayList<TreeMap<String, String>> statusVals;

   /**
    * Creates new form JFrameNodeStatus
    */
   public JInternalFrameNodeStatus(NodeTypesEnum nodeType,
      ArrayList<TreeMap<String, String>> newStatusVals)
   {
      initComponents();
      
      this.nodeType = nodeType;
      statusVals = newStatusVals;
      this.group = "";

      calculateStatusLayout();
      updateStatus();

      setFrameIcon(GuiTk.getFrameIcon());
      setTitle(getFrameTitle());
   }

   public JInternalFrameNodeStatus(NodeTypesEnum nodeType,
      ArrayList<TreeMap<String, String>> newStatusVals, String group)
   {
      initComponents();

      this.nodeType = nodeType;
      statusVals = newStatusVals;
      this.group = group;

      calculateStatusLayout();
      updateStatus();

      setFrameIcon(GuiTk.getFrameIcon());
      setTitle(getFrameTitle());
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {

      jScrollPaneFrame = new javax.swing.JScrollPane();
      jPanelFrame = new javax.swing.JPanel();

      FormListener formListener = new FormListener();

      setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      setClosable(true);
      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setResizable(true);
      setMinimumSize(new java.awt.Dimension(0, 0));
      setPreferredSize(new java.awt.Dimension(540, 250));
      addInternalFrameListener(formListener);
      addComponentListener(formListener);

      jScrollPaneFrame.setMinimumSize(new java.awt.Dimension(0, 0));
      jScrollPaneFrame.setPreferredSize(new java.awt.Dimension(500, 220));

      jPanelFrame.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jPanelFrame.setMinimumSize(new java.awt.Dimension(0, 0));
      jPanelFrame.setPreferredSize(new java.awt.Dimension(500, 200));
      jPanelFrame.setLayout(new java.awt.GridBagLayout());
      jScrollPaneFrame.setViewportView(jPanelFrame);

      getContentPane().add(jScrollPaneFrame, java.awt.BorderLayout.CENTER);

      pack();
   }

   // Code for dispatching events from components to event handlers.

   private class FormListener implements java.awt.event.ComponentListener, javax.swing.event.InternalFrameListener
   {
      FormListener() {}
      public void componentHidden(java.awt.event.ComponentEvent evt)
      {
      }

      public void componentMoved(java.awt.event.ComponentEvent evt)
      {
      }

      public void componentResized(java.awt.event.ComponentEvent evt)
      {
         if (evt.getSource() == JInternalFrameNodeStatus.this)
         {
            JInternalFrameNodeStatus.this.formComponentResized(evt);
         }
      }

      public void componentShown(java.awt.event.ComponentEvent evt)
      {
      }

      public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
      {
      }

      public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
      {
         if (evt.getSource() == JInternalFrameNodeStatus.this)
         {
            JInternalFrameNodeStatus.this.formInternalFrameClosed(evt);
         }
      }

      public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
      {
      }

      public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
      {
      }

      public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
      {
      }

      public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
      {
      }

      public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
      {
      }
   }// </editor-fold>//GEN-END:initComponents

   private void formComponentResized(java.awt.event.ComponentEvent evt)//GEN-FIRST:event_formComponentResized
   {//GEN-HEADEREND:event_formComponentResized
      calculateStatusLayout();
      updateStatus();
   }//GEN-LAST:event_formComponentResized

   private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt)//GEN-FIRST:event_formInternalFrameClosed
   {//GEN-HEADEREND:event_formInternalFrameClosed
      FrameManager.delFrame(this);
   }//GEN-LAST:event_formInternalFrameClosed

   private int getStatusValsSize()
   {
      int retVal;
      
      synchronized(this.lockStatusVals)
      {
         retVal = this.statusVals.size();
      }

      return retVal;
   }

   private void calculateStatusLayout()
   {
      Component labels[] = jPanelFrame.getComponents();
      int maxWidth = 0;
      int minWidth = Integer.MAX_VALUE;
      
      int labelCount = labels.length;

      // fist init of the GUI
      if(labelCount == 0)
      {
         int defaultLabelsPerLine = 10;
         this.labelsPerLine = defaultLabelsPerLine;

         int numLabels = getStatusValsSize();
         this.lineCount = numLabels / this.labelsPerLine;
         if( (this.lineCount == 0 ) || (labelCount % this.labelsPerLine) != 0)
         {
            this.lineCount++;
         }

         return;
      }

      for (Component label : labels)
      {
         Dimension labelSize = label.getPreferredSize();
         if(maxWidth < labelSize.width)
         {
            maxWidth = labelSize.width;
         }

         if(minWidth > labelSize.width)
         {
            minWidth = labelSize.width;
         }
      }

      if(maxWidth <= 0)
      {
         return;
      }

      Dimension scrollPanelSize = jPanelFrame.getSize();
      int scrollPanelWidth = scrollPanelSize.width - 20; // subtract outer borders

      // devide by text label + icon label + insets width and multiply by two (two label)
      this.labelsPerLine = (scrollPanelWidth / (maxWidth + minWidth + 30)) * 2;
      if(this.labelsPerLine == 0)
      {
         this.labelsPerLine = 2;
      }

      this.lineCount = labelCount / this.labelsPerLine;
      if( (this.lineCount == 0 ) || (labelCount % this.labelsPerLine) != 0)
      {
         this.lineCount++;
      }
   }

   public void updateStatus(ArrayList<TreeMap<String, String>> newStatusVals)
   {
      synchronized(this.lockStatusVals)
      {
         this.statusVals.clear();
         this.statusVals.addAll(newStatusVals);
      }
   }

   private void updateStatus()
   {
      synchronized(this.lockStatusVals)
      {
         int statusCount = this.statusVals.size();
         int labelCount = jPanelFrame.getComponentCount();
         boolean foundNewStatus = false;

         if (statusCount != labelCount)
         {
            foundNewStatus = true;
         }
         else
         {
            for(TreeMap<String, String> groupedNode : this.statusVals)
            {
               boolean labelFound = false;

               String status = groupedNode.get("value");
               String nodeID = groupedNode.get("node");
               int nodeNumID = Integer.parseInt(groupedNode.get("nodeNumID"));
               String node = Node.getTypedNodeID(nodeID, nodeNumID, this.nodeType);

               for (int i = 0; i < labelCount; i++)
               {
                  JLabel tmpLabel = (JLabel) jPanelFrame.getComponent(i);

                  if (tmpLabel.getText().equals(node + "  "))
                  {
                     labelFound = true;
                     if (!((ImageIcon) tmpLabel.getIcon()).getDescription().equals(status))
                     {
                        foundNewStatus = true;
                     }
                  }
               }

               if ((!labelFound) || foundNewStatus)
               {
                  foundNewStatus = true;
                  break;
               }
            }
         }

         if (foundNewStatus)
         {
            int indexX = 0;
            int indexY = 0;

            jPanelFrame.removeAll();

            for(TreeMap<String, String> groupedNode : this.statusVals)
            {
               String status = groupedNode.get("value");
               String nodeID = groupedNode.get("node");
               int nodeNumID = Integer.parseInt(groupedNode.get("nodeNumID"));
               String node = Node.getTypedNodeID(nodeID, nodeNumID, this.nodeType);

               JLabel labelStatusText = new JLabel(node);
               labelStatusText.setHorizontalTextPosition(SwingConstants.LEADING);

               JLabel labelStatusIcon = new JLabel("");

               if (status.equals("true"))
               {
                  ImageIcon icon = new ImageIcon(JInternalFrameNodeStatus.class.getResource(
                     FilePathsEnum.IMAGE_STATUS_OK.getPath()));
                  icon.setDescription("true");
                  labelStatusIcon.setIcon(icon); // NOI18N
               }
               else
               {
                  ImageIcon icon = new ImageIcon(JInternalFrameNodeStatus.class.getResource(
                     FilePathsEnum.IMAGE_STATUS_FAIL.getPath()));
                  icon.setDescription("false");
                  labelStatusIcon.setIcon(icon); // NOI18N
               }

               GridBagConstraints gbcIcon = new GridBagConstraints();
               gbcIcon.fill = GridBagConstraints.NONE;
               gbcIcon.weightx = 0;
               gbcIcon.weighty = 0;
               gbcIcon.gridwidth = 1;
               gbcIcon.gridheight = 1;
               gbcIcon.gridx = indexX;
               gbcIcon.gridy = indexY;
               gbcIcon.anchor = GridBagConstraints.LINE_END;
               gbcIcon.insets = new Insets(5, 10, 5, 5);
               gbcIcon.ipadx = 0;
               gbcIcon.ipady = 0;

               GridBagConstraints gbcText = new GridBagConstraints();
               gbcText.fill = GridBagConstraints.NONE;
               gbcText.weightx = 0;
               gbcText.weighty = 0;
               gbcText.gridwidth = 1;
               gbcText.gridheight = 1;
               gbcText.gridx = indexX + 1;
               gbcText.gridy = indexY;
               gbcText.anchor = GridBagConstraints.LINE_START;
               gbcText.insets = new Insets(5, 5, 5, 10);
               gbcText.ipadx = 0;
               gbcText.ipady = 0;

               jPanelFrame.add(labelStatusIcon, gbcIcon);
               jPanelFrame.add(labelStatusText, gbcText);

               labelStatusIcon.setVisible(true);
               labelStatusText.setVisible(true);

               indexX += 2;
               if(indexX >= this.labelsPerLine)
               {
                  indexX = 0;
                  indexY++;
               }
            }
            jPanelFrame.revalidate();
         }
      }
      calculateStatusLayout();
   }

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JPanel jPanelFrame;
   private javax.swing.JScrollPane jScrollPaneFrame;
   // End of variables declaration//GEN-END:variables

   public final String getGroup()
   {
      return this.group;
   }

   @Override
   public boolean isEqual(JInternalFrameInterface obj)
   {
      if (!(obj instanceof JInternalFrameNodeStatus))
      {
         return false;
      }

      JInternalFrameNodeStatus objCasted = (JInternalFrameNodeStatus) obj;
      return objCasted.getFrameTitle().equals(this.getFrameTitle());
   }

   @Override
   public final String getFrameTitle()
   {
      String newTitle;
      if(group.isEmpty() )
      {
         newTitle = this.nodeType.type() + " nodes status";
      }
      else
      {
         newTitle = this.nodeType.type() + " nodes status (Group : " + this.group + ")";
      }
      return newTitle;
   }
}
