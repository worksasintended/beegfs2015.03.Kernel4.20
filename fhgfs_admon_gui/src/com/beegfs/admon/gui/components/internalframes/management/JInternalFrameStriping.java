package com.beegfs.admon.gui.components.internalframes.management;

import com.beegfs.admon.gui.common.XMLParser;
import com.beegfs.admon.gui.common.enums.StripePatternEnum;
import com.beegfs.admon.gui.common.exceptions.CommunicationException;
import com.beegfs.admon.gui.common.tools.CryptTk;
import static com.beegfs.admon.gui.common.tools.DefinesTk.STRIPEPATTERN_MIN_CHUNKSIZE;
import com.beegfs.admon.gui.common.tools.GuiTk;
import com.beegfs.admon.gui.common.tools.HttpTk;
import com.beegfs.admon.gui.components.internalframes.JInternalFrameInterface;
import com.beegfs.admon.gui.components.managers.FrameManager;
import com.beegfs.admon.gui.program.Main;
import java.awt.GridBagConstraints;
import java.awt.Insets;
import java.util.ArrayList;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

public class JInternalFrameStriping extends javax.swing.JInternalFrame
   implements JInternalFrameInterface
{
   static final Logger logger = Logger.getLogger(
      JInternalFrameStriping.class.getCanonicalName());
   private static final long serialVersionUID = 1L;

   private static final String THREAD_NAME = "Striping";

   /**
    * Creates new form JInternalFrameMetaNode
    */
   public JInternalFrameStriping()
   {
      this.isDir = false;
      initComponents();
      setTitle(getFrameTitle());
      setFrameIcon(GuiTk.getFrameIcon());

      checkIsModifiable();
   }

   @Override
   public boolean isEqual(JInternalFrameInterface obj)
   {
      return obj instanceof JInternalFrameStriping;
   }

   public void setPathFromExternal(String path, boolean isDir)
   {
      String pathResult = path.replace("//", "/");
      jTextFieldGetPath.setText(pathResult);
      this.isDir = isDir;
      checkIsModifiable();
      requestInfo();
   }

   private void requestInfo()
   {
      try
      {
         String pathStr = jTextFieldGetPath.getText();
         if (pathStr.isEmpty())
         {
            pathStr = "/";
         }
         XMLParser parser = new XMLParser(HttpTk.generateAdmonUrl("/XML_Striping?pathStr="
                 + pathStr), THREAD_NAME);
         parser.update();

         Boolean errorOccured = Boolean.parseBoolean(parser.getValue("error"));

         if (errorOccured)
         {
            JOptionPane.showMessageDialog(null, "Error during retrieving the striping Information! "
                    + "Please check the path and make sure all servers are running.",
                    "Get striping information", JOptionPane.ERROR_MESSAGE);
         }
         else
         {
            updateStripingPanel(parser);
            updateLocationPanel(parser);

            checkIsModifiable();
            jPanelFrame.revalidate();
            jPanelFrame.repaint();
         }
      }
      catch (CommunicationException e)
      {
         logger.log(Level.SEVERE, "Communication Error occured", new Object[]{e, true});
      }
      catch (java.lang.NullPointerException npe)
      {
         logger.log(Level.FINEST, "Internal error.", npe);
      }
   }

   /**
    * checks the user (admin) and check the path, the path must be a directory
    */
   private void checkIsModifiable()
   {
      if (Main.getSession().getIsAdmin())
      {
         jButtonStripingChange.setEnabled(isDir);
         jTextFieldStripingChunkCount.setEditable(isDir);
         jTextFieldStripingChunkSize.setEditable(isDir);
         jComboStripingStripePattern.setEnabled(isDir);
      }
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      jScrollPaneFrame = new javax.swing.JScrollPane();
      jPanelFrame = new javax.swing.JPanel();
      jPanelPath = new javax.swing.JPanel();
      jLabelGetPath = new javax.swing.JLabel();
      jTextFieldGetPath = new javax.swing.JTextField();
      jButtonGetPath = new javax.swing.JButton();
      jButtonFileBrowser = new javax.swing.JButton();
      jPanelCenter = new javax.swing.JPanel();
      jPanelStriping = new javax.swing.JPanel();
      jLabelTextStripingPath = new javax.swing.JLabel();
      jLabelStripingPath = new javax.swing.JLabel();
      jLabelStripingChunkSize = new javax.swing.JLabel();
      jLabelStripingChunkCount = new javax.swing.JLabel();
      jTextFieldStripingChunkSize = new javax.swing.JTextField();
      jLabelStripingChunkSizeUnit = new javax.swing.JLabel();
      jTextFieldStripingChunkCount = new javax.swing.JTextField();
      jButtonStripingChange = new javax.swing.JButton();
      jLabelStripingStripePattern = new javax.swing.JLabel();
      jComboStripingStripePattern = new javax.swing.JComboBox<>();
      jLabelStripingMetaMirroring = new javax.swing.JLabel();
      jCheckBoxStripingMetaMirroring = new javax.swing.JCheckBox();
      filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10), new java.awt.Dimension(10, 10));
      jPanelLocation = new javax.swing.JPanel();
      jLabelMeta = new javax.swing.JLabel();
      jLabelMetaID = new javax.swing.JLabel();
      jLabelMetaMirror = new javax.swing.JLabel();
      jLabelMetaMirrorID = new javax.swing.JLabel();
      jLabelStorage = new javax.swing.JLabel();
      jLabelStorageMirror = new javax.swing.JLabel();
      jLabelStorageIDs = new javax.swing.JLabel();
      jLabelStorageMirrorIDs = new javax.swing.JLabel();

      setClosable(true);
      setResizable(true);
      setMinimumSize(new java.awt.Dimension(0, 0));
      setPreferredSize(new java.awt.Dimension(1000, 400));
      addInternalFrameListener(new javax.swing.event.InternalFrameListener()
      {
         public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt)
         {
         }
         public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt)
         {
         }
         public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt)
         {
            formInternalFrameClosed(evt);
         }
         public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt)
         {
         }
         public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt)
         {
         }
         public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt)
         {
         }
         public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt)
         {
         }
      });

      jScrollPaneFrame.setMinimumSize(new java.awt.Dimension(0, 0));
      jScrollPaneFrame.setPreferredSize(new java.awt.Dimension(980, 400));

      jPanelFrame.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jPanelFrame.setMinimumSize(new java.awt.Dimension(950, 350));
      jPanelFrame.setPreferredSize(new java.awt.Dimension(960, 360));
      jPanelFrame.setLayout(new java.awt.BorderLayout(10, 5));

      jPanelPath.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 10, 0));
      jPanelPath.setPreferredSize(new java.awt.Dimension(1000, 80));
      jPanelPath.setLayout(new java.awt.GridBagLayout());

      jLabelGetPath.setText("Get information on path :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelPath.add(jLabelGetPath, gridBagConstraints);

      jTextFieldGetPath.setMinimumSize(new java.awt.Dimension(500, 28));
      jTextFieldGetPath.setPreferredSize(new java.awt.Dimension(500, 25));
      jTextFieldGetPath.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jTextFieldGetPathActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelPath.add(jTextFieldGetPath, gridBagConstraints);

      jButtonGetPath.setText("Get");
      jButtonGetPath.setMaximumSize(new java.awt.Dimension(110, 30));
      jButtonGetPath.setMinimumSize(new java.awt.Dimension(110, 30));
      jButtonGetPath.setPreferredSize(new java.awt.Dimension(110, 30));
      jButtonGetPath.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonGetPathActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      jPanelPath.add(jButtonGetPath, gridBagConstraints);

      jButtonFileBrowser.setText("File browser");
      jButtonFileBrowser.setMaximumSize(new java.awt.Dimension(110, 30));
      jButtonFileBrowser.setMinimumSize(new java.awt.Dimension(110, 30));
      jButtonFileBrowser.setPreferredSize(new java.awt.Dimension(110, 30));
      jButtonFileBrowser.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonFileBrowserActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      jPanelPath.add(jButtonFileBrowser, gridBagConstraints);

      jPanelFrame.add(jPanelPath, java.awt.BorderLayout.NORTH);

      jPanelCenter.setPreferredSize(new java.awt.Dimension(1100, 300));
      jPanelCenter.setLayout(new javax.swing.BoxLayout(jPanelCenter, javax.swing.BoxLayout.LINE_AXIS));

      jPanelStriping.setBorder(javax.swing.BorderFactory.createTitledBorder("Striping Information"));
      jPanelStriping.setMinimumSize(new java.awt.Dimension(400, 300));
      jPanelStriping.setPreferredSize(new java.awt.Dimension(480, 280));
      jPanelStriping.setLayout(new java.awt.GridBagLayout());

      jLabelTextStripingPath.setText("Path :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelTextStripingPath, gridBagConstraints);

      jLabelStripingPath.setMinimumSize(new java.awt.Dimension(10, 28));
      jLabelStripingPath.setPreferredSize(new java.awt.Dimension(10, 28));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingPath, gridBagConstraints);

      jLabelStripingChunkSize.setText("Chunk size :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingChunkSize, gridBagConstraints);

      jLabelStripingChunkCount.setText("Default # of targets :");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingChunkCount, gridBagConstraints);

      jTextFieldStripingChunkSize.setEditable(false);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jTextFieldStripingChunkSize, gridBagConstraints);

      jLabelStripingChunkSizeUnit.setText("bytes");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingChunkSizeUnit, gridBagConstraints);

      jTextFieldStripingChunkCount.setEditable(false);
      jTextFieldStripingChunkCount.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jTextFieldStripingChunkCountActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jTextFieldStripingChunkCount, gridBagConstraints);

      jButtonStripingChange.setText("Change");
      jButtonStripingChange.setMaximumSize(new java.awt.Dimension(80, 30));
      jButtonStripingChange.setMinimumSize(new java.awt.Dimension(80, 30));
      jButtonStripingChange.setPreferredSize(new java.awt.Dimension(80, 30));
      jButtonStripingChange.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonStripingChangeActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 5;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 25, 5);
      jPanelStriping.add(jButtonStripingChange, gridBagConstraints);

      jLabelStripingStripePattern.setText("Stripe pattern:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingStripePattern, gridBagConstraints);

      jComboStripingStripePattern.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "RAID 0", "RAID 10", "BuddyMirror" }));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jComboStripingStripePattern, gridBagConstraints);

      jLabelStripingMetaMirroring.setText("Metadata Mirroring:");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jLabelStripingMetaMirroring, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 4;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelStriping.add(jCheckBoxStripingMetaMirroring, gridBagConstraints);

      jPanelCenter.add(jPanelStriping);
      jPanelCenter.add(filler1);

      jPanelLocation.setBorder(javax.swing.BorderFactory.createTitledBorder("Location"));
      jPanelLocation.setMinimumSize(new java.awt.Dimension(400, 300));
      jPanelLocation.setPreferredSize(new java.awt.Dimension(480, 280));
      jPanelLocation.setLayout(new java.awt.GridBagLayout());

      jLabelMeta.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabelMeta.setText("Metadata target:");
      jLabelMeta.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelMeta, gridBagConstraints);

      jLabelMetaID.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
      jLabelMetaID.setMaximumSize(new java.awt.Dimension(200, 20));
      jLabelMetaID.setMinimumSize(new java.awt.Dimension(200, 20));
      jLabelMetaID.setPreferredSize(new java.awt.Dimension(20, 20));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelMetaID, gridBagConstraints);

      jLabelMetaMirror.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabelMetaMirror.setText("Mirror metadata target:");
      jLabelMetaMirror.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelMetaMirror, gridBagConstraints);

      jLabelMetaMirrorID.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);
      jLabelMetaMirrorID.setMaximumSize(new java.awt.Dimension(200, 20));
      jLabelMetaMirrorID.setMinimumSize(new java.awt.Dimension(200, 20));
      jLabelMetaMirrorID.setPreferredSize(new java.awt.Dimension(20, 20));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelMetaMirrorID, gridBagConstraints);

      jLabelStorage.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabelStorage.setText("Storage targets:");
      jLabelStorage.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelStorage, gridBagConstraints);

      jLabelStorageMirror.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
      jLabelStorageMirror.setText("Mirror storage targets:");
      jLabelStorageMirror.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelStorageMirror, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelStorageIDs, gridBagConstraints);
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
      jPanelLocation.add(jLabelStorageMirrorIDs, gridBagConstraints);

      jPanelCenter.add(jPanelLocation);

      jPanelFrame.add(jPanelCenter, java.awt.BorderLayout.CENTER);

      jScrollPaneFrame.setViewportView(jPanelFrame);

      getContentPane().add(jScrollPaneFrame, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       FrameManager.delFrame(this);
    }//GEN-LAST:event_formInternalFrameClosed

    private void jTextFieldGetPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextFieldGetPathActionPerformed
       requestInfo();
}//GEN-LAST:event_jTextFieldGetPathActionPerformed

    private void jButtonGetPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonGetPathActionPerformed
       requestInfo();
}//GEN-LAST:event_jButtonGetPathActionPerformed

   private void jButtonStripingChangeActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonStripingChangeActionPerformed
   {//GEN-HEADEREND:event_jButtonStripingChangeActionPerformed
      try
      {
         // get the parameters  and check
         String pathStr = jLabelStripingPath.getText();
         String cs = jTextFieldStripingChunkSize.getText();
         String dnn = jTextFieldStripingChunkCount.getText();
         long int_cs = Long.parseLong(cs);
         int int_dnn = Integer.parseInt(dnn);
         int pattern = jComboStripingStripePattern.getSelectedIndex() + 1;
         String metaMirroring = "false";
         if(jCheckBoxStripingMetaMirroring.isSelected())
         {
            metaMirroring = "true";
         }

         if (cs.isEmpty() || dnn.isEmpty() || int_cs < STRIPEPATTERN_MIN_CHUNKSIZE || int_dnn <= 0)
         {
            String msg = "Values 'chunk size' and 'default # of nodes' must be numeric. The " +
               "'default # of nodes' must be greater than zero and the chunk size must be" +
               "greater then " + STRIPEPATTERN_MIN_CHUNKSIZE + "!";
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
         }
         else
         if(Long.bitCount(int_cs) != 1)
         {
            String msg = "The chunk size must be a numeric value of power of 2!";
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
         }
         else
         if(pattern == StripePatternEnum.STRIPE_PATTERN_RAID_10.ordinal() )
         {
            String msg = "The strippe pattern RAID10 is not supported anymore!";
            JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
         }
         else
         {
            // get a nonce for authentication from server
            XMLParser parser = new XMLParser(HttpTk.generateAdmonUrl("/XML_GetNonce"), THREAD_NAME);
            parser.update();
            TreeMap<String, String> data = parser.getTreeMap();
            int nonceID = Integer.parseInt(data.get("id"));
            long nonce = Long.parseLong(data.get("nonce"));
            String secret = CryptTk.cryptWithNonce(Main.getSession().getPw(), nonce);

            // request a change
            String url = HttpTk.generateAdmonUrl("/XML_Striping");
            String params = "?change=" + true + "&pathStr=" + pathStr + "&cs=" + cs + "&dnn=" +
               dnn + "&nonceID=" + nonceID + "&secret=" + secret + "&pattern=" + pattern +
               "&metaMirroring=" + metaMirroring;
            parser.setUrl(url + params);
            parser.update();

            Boolean errorOccured = Boolean.parseBoolean(parser.getValue("error"));

            if (errorOccured)
            {
               JOptionPane.showMessageDialog(null, "Error during changing the striping "
                  + "Information! Please check the path and make sure all servers are"
                  + "running.", "Set striping information", JOptionPane.ERROR_MESSAGE);
            }
            else
            {
               // check if everything went right
               if (Boolean.parseBoolean(parser.getValue("authenticated")))
               {
                  jTextFieldGetPath.setText(pathStr);
                  requestInfo();
               }
               else
               {
                  String msg = "Authentication failed!";
                  JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
               }
            }
         }
      }
      catch (CommunicationException e)
      {
         logger.log(Level.SEVERE, "Communication Error occured", new Object[]{e, true});
      }
      catch (NumberFormatException e)
      {
         String msg = "Values 'chunk size' and 'default # of nodes' must be numeric and greater "
         + "than zero !";
         JOptionPane.showMessageDialog(this, msg, "Error", JOptionPane.ERROR_MESSAGE);
      }
   }//GEN-LAST:event_jButtonStripingChangeActionPerformed

   private void jTextFieldStripingChunkCountActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextFieldStripingChunkCountActionPerformed
   {//GEN-HEADEREND:event_jTextFieldStripingChunkCountActionPerformed

   }//GEN-LAST:event_jTextFieldStripingChunkCountActionPerformed

   private void jButtonFileBrowserActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonFileBrowserActionPerformed
   {//GEN-HEADEREND:event_jButtonFileBrowserActionPerformed
      JInternalFrameFileBrowser frame = new JInternalFrameFileBrowser();
      if (!FrameManager.isFrameOpen(frame))
      {
         this.getDesktopPane().add(frame);
         frame.setVisible(true);
         FrameManager.addFrame(frame);
      }
   }//GEN-LAST:event_jButtonFileBrowserActionPerformed

   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.Box.Filler filler1;
   private javax.swing.JButton jButtonFileBrowser;
   private javax.swing.JButton jButtonGetPath;
   private javax.swing.JButton jButtonStripingChange;
   private javax.swing.JCheckBox jCheckBoxStripingMetaMirroring;
   private javax.swing.JComboBox<String> jComboStripingStripePattern;
   private javax.swing.JLabel jLabelGetPath;
   private javax.swing.JLabel jLabelMeta;
   private javax.swing.JLabel jLabelMetaID;
   private javax.swing.JLabel jLabelMetaMirror;
   private javax.swing.JLabel jLabelMetaMirrorID;
   private javax.swing.JLabel jLabelStorage;
   private javax.swing.JLabel jLabelStorageIDs;
   private javax.swing.JLabel jLabelStorageMirror;
   private javax.swing.JLabel jLabelStorageMirrorIDs;
   private javax.swing.JLabel jLabelStripingChunkCount;
   private javax.swing.JLabel jLabelStripingChunkSize;
   private javax.swing.JLabel jLabelStripingChunkSizeUnit;
   private javax.swing.JLabel jLabelStripingMetaMirroring;
   private javax.swing.JLabel jLabelStripingPath;
   private javax.swing.JLabel jLabelStripingStripePattern;
   private javax.swing.JLabel jLabelTextStripingPath;
   private javax.swing.JPanel jPanelCenter;
   private javax.swing.JPanel jPanelFrame;
   private javax.swing.JPanel jPanelLocation;
   private javax.swing.JPanel jPanelPath;
   private javax.swing.JPanel jPanelStriping;
   private javax.swing.JScrollPane jScrollPaneFrame;
   private javax.swing.JTextField jTextFieldGetPath;
   private javax.swing.JTextField jTextFieldStripingChunkCount;
   private javax.swing.JTextField jTextFieldStripingChunkSize;
   // End of variables declaration//GEN-END:variables

   private boolean isDir;

   @Override
   public final String getFrameTitle()
   {
      return "Striping Information";
   }

   void updateLocationPanel(XMLParser parser) throws CommunicationException
   {
      jPanelLocation.removeAll();

      int gridX = 0;
      int gridY = 0;

      GridBagConstraints gbcText = new GridBagConstraints();
      gbcText.gridx = gridX;
      gbcText.gridy = gridY;
      gbcText.anchor = GridBagConstraints.EAST;
      gbcText.insets = new Insets(5, 5, 5, 5);

      jLabelMeta = new JLabel("Metadata target:");
      jPanelLocation.add(jLabelMeta, gbcText);

      GridBagConstraints gbcIDs = new GridBagConstraints();
      gbcIDs.gridx = gridX;
      gbcIDs.gridy = gridY;
      gbcIDs.anchor = GridBagConstraints.WEST;
      gbcIDs.insets = new Insets(5, 5, 5, 5);

      gridX++;
      gbcIDs.gridx = gridX;
      gbcIDs.gridy = gridY;
      jLabelMetaID = new JLabel(parser.getValue("meta"));
      jPanelLocation.add(jLabelMetaID, gbcIDs);

      String metaMirrorValue = parser.getValue("metaMirror");
      if(!metaMirrorValue.isEmpty())
      {
         gridX = 0;
         gridY++;
         gbcText.gridx = gridX;
         gbcText.gridy = gridY;
         jLabelMetaMirror = new JLabel("Mirror metadata target:");
         jPanelLocation.add(jLabelMetaMirror, gbcText);

         gridX++;
         gbcIDs.gridx = gridX;
         gbcIDs.gridy = gridY;
         jLabelMetaMirrorID = new JLabel(metaMirrorValue);
         jPanelLocation.add(jLabelMetaMirrorID, gbcIDs);
      }

      boolean isDirectory = Boolean.parseBoolean(parser.getValue("isDir", "settings"));
      if(!isDirectory)
      {
         ArrayList<String> targets = parser.getVector("storageTargets");

         gridX = 0;
         gridY++;
         gbcText.gridx = gridX;
         gbcText.gridy = gridY;
         jLabelStorage = new JLabel("Storage targets:");
         jPanelLocation.add(jLabelStorage, gbcText);

         gridX++;
         for (String target : targets)
         {
            gbcIDs.gridx = gridX;
            gbcIDs.gridy = gridY;
            JLabel label = new JLabel(target);
            jPanelLocation.add(label, gbcIDs);
            gridY++;
         }

         ArrayList<String> mirrorTargets = parser.getVector("mirrorStorageTargets");

         if(!mirrorTargets.isEmpty())
         {
            gridX = 0;
            gbcText.gridx = gridX;
            gbcText.gridy = gridY;
            jLabelStorageMirror = new JLabel("Mirror storage target:");
            jPanelLocation.add(jLabelStorageMirror, gbcText);

            gridX++;
            for (String mirrorTarget : mirrorTargets)
            {
               gbcIDs.gridx = gridX;
               gbcIDs.gridy = gridY;
               JLabel label = new JLabel(mirrorTarget);
               jPanelLocation.add(label, gbcIDs);
               gridY++;
            }
         }
      }
   }

   void updateStripingPanel(XMLParser parser) throws CommunicationException
   {
      TreeMap<String, String> settings = parser.getTreeMap("settings");
      this.isDir = Boolean.parseBoolean(settings.get("isDir"));
      jLabelStripingPath.setText(settings.get("path"));
      jTextFieldStripingChunkCount.setText(settings.get("defaultNumNodes"));
      jTextFieldStripingChunkSize.setText(settings.get("chunksize"));
      jComboStripingStripePattern.setSelectedIndex(Integer.parseInt(settings.get("pattern")) - 1);

      if(settings.get("metaMirroring").equals("true"))
      {
         jCheckBoxStripingMetaMirroring.setSelected(true);
      }
      else
      {
         jCheckBoxStripingMetaMirroring.setSelected(false);
      }
   }
}
