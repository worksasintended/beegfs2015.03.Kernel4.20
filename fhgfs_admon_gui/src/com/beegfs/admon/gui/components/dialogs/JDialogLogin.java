package com.beegfs.admon.gui.components.dialogs;

import com.beegfs.admon.gui.common.XMLParser;
import com.beegfs.admon.gui.common.enums.FilePathsEnum;
import com.beegfs.admon.gui.common.exceptions.CommunicationException;
import com.beegfs.admon.gui.common.exceptions.WrongBackendVersionException;
import com.beegfs.admon.gui.common.tools.CryptTk;
import com.beegfs.admon.gui.common.tools.GuiTk;
import com.beegfs.admon.gui.common.tools.HttpTk;
import com.beegfs.admon.gui.components.MainWindow;
import com.beegfs.admon.gui.program.Main;
import java.awt.Container;
import java.util.TreeMap;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class JDialogLogin extends javax.swing.JDialog
{
   static final Logger LOGGER = Logger.getLogger(JDialogLogin.class.getCanonicalName());
   private static final long serialVersionUID = 1L;
   private static final String THREAD_NAME = "LoginThread";

   private static final int LOGO_WIDHT = 80;
   private static final int LOGO_HEIGHT = 120;
   
   private final transient XMLParser parser;

   /**
    * Creates new form NewJDialog
    */
   public JDialogLogin(MainWindow parent, boolean modal)
   {
      super(parent, modal);
      initComponents();
      setTitle("Login@" + Main.getConfig().getAdmonHost());
      this.setIconImage(GuiTk.getFrameIcon().getImage());
      this.setLocationRelativeTo(null);
      this.jPasswordFieldPW.requestFocus();
      parser = new XMLParser(HttpTk.generateAdmonUrl("/XML_PreAuthInfo"), THREAD_NAME);
   }

   /**
    * This method is called from within the constructor to initialize the form. WARNING: Do NOT
    * modify this code. The content of this method is always regenerated by the Form Editor.
    */
   @SuppressWarnings("unchecked")
   // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
   private void initComponents()
   {
      java.awt.GridBagConstraints gridBagConstraints;

      jPanelDialog = new javax.swing.JPanel();
      jLabelLogo = new javax.swing.JLabel();
      jLabelUsername = new javax.swing.JLabel();
      jLabelPassword = new javax.swing.JLabel();
      jComboBoxUser = new javax.swing.JComboBox<>();
      jPasswordFieldPW = new javax.swing.JPasswordField();
      jButtonLogin = new javax.swing.JButton();

      setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
      setTitle("Login");
      setAlwaysOnTop(true);
      setBackground(java.awt.Color.white);
      setBounds(new java.awt.Rectangle(0, 0, 0, 0));
      setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
      setForeground(java.awt.Color.white);
      setIconImage(null);
      setModal(true);
      addComponentListener(new java.awt.event.ComponentAdapter()
      {
         public void componentShown(java.awt.event.ComponentEvent evt)
         {
            formComponentShown(evt);
         }
      });

      jPanelDialog.setBorder(javax.swing.BorderFactory.createEmptyBorder(10, 10, 10, 10));
      jPanelDialog.setLayout(new java.awt.GridBagLayout());

      jLabelLogo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
      jLabelLogo.setIcon(GuiTk.resizeImage(new javax.swing.ImageIcon(JDialogLogin.class.getResource(FilePathsEnum.IMAGE_BEEGFS_LOGO.getPath())), LOGO_WIDHT, LOGO_HEIGHT));
      jLabelLogo.setMaximumSize(new java.awt.Dimension(120, 80));
      jLabelLogo.setMinimumSize(new java.awt.Dimension(120, 80));
      jLabelLogo.setName(""); // NOI18N
      jLabelLogo.setPreferredSize(new java.awt.Dimension(120, 80));
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 2;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.gridwidth = 2;
      gridBagConstraints.gridheight = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      jPanelDialog.add(jLabelLogo, gridBagConstraints);

      jLabelUsername.setText("Username : ");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      jPanelDialog.add(jLabelUsername, gridBagConstraints);

      jLabelPassword.setText("Password : ");
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 0;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
      gridBagConstraints.insets = new java.awt.Insets(10, 10, 10, 10);
      jPanelDialog.add(jLabelPassword, gridBagConstraints);

      jComboBoxUser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Information", "Administrator" }));
      jComboBoxUser.setSelectedIndex(1);
      jComboBoxUser.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jComboBoxUserActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 0;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
      jPanelDialog.add(jComboBoxUser, gridBagConstraints);

      jPasswordFieldPW.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jPasswordFieldPWActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 1;
      gridBagConstraints.gridwidth = 3;
      gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
      gridBagConstraints.weightx = 1.0;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
      jPanelDialog.add(jPasswordFieldPW, gridBagConstraints);

      jButtonLogin.setText("Login");
      jButtonLogin.addActionListener(new java.awt.event.ActionListener()
      {
         public void actionPerformed(java.awt.event.ActionEvent evt)
         {
            jButtonLoginActionPerformed(evt);
         }
      });
      gridBagConstraints = new java.awt.GridBagConstraints();
      gridBagConstraints.gridx = 1;
      gridBagConstraints.gridy = 2;
      gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
      gridBagConstraints.insets = new java.awt.Insets(10, 0, 10, 10);
      jPanelDialog.add(jButtonLogin, gridBagConstraints);

      getContentPane().add(jPanelDialog, java.awt.BorderLayout.CENTER);

      pack();
   }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxUserActionPerformed

}//GEN-LAST:event_jComboBoxUserActionPerformed

    private void jButtonLoginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLoginActionPerformed
       try
       {
          String username = (String) jComboBoxUser.getSelectedItem();
          String pw = CryptTk.getMD5(jPasswordFieldPW.getPassword());
          if (doLogin(username, pw))
          { // login successful
             LOGGER.log(Level.INFO, "Login successful on host {0} as user {1}",
                new Object[]{Main.getConfig().getAdmonHost(), username});
             this.dispose();
          }
          else
          {
             this.setVisible(false);
             JOptionPane.showMessageDialog(Main.getMainWindow(), "Passwort is incorrect!",
                     "Authentication failed", JOptionPane.ERROR_MESSAGE);
             LOGGER.log(Level.WARNING, "Passwort for user {0} is incorrect! Tried to login on " +
                "host {1}", new Object[]{username, Main.getConfig().getAdmonHost()});
             this.setVisible(true);
          }
       }
       catch (CommunicationException e)
       {
          this.setVisible(false);
          JOptionPane.showMessageDialog(Main.getMainWindow(),
                  "Unable to communicate with the remote backend: "
                  + Main.getConfig().getAdmonHost() + ".",
                  "Communication Error", JOptionPane.ERROR_MESSAGE);
          this.setVisible(true);
          LOGGER.log(Level.SEVERE, "Communication Error", e);
       }
       catch (WrongBackendVersionException e)
       {
          this.setVisible(false);
          String errMsg = "The version of the GUI and the version of the backend daemon do not "
                  + "match. Please download the appropriate GUI version from "
                  + HttpTk.generateAdmonUrl("/beegfs-admon-gui.jar");
          JOptionPane.showMessageDialog(Main.getMainWindow(), errMsg, "Wrong Software Version",
                  JOptionPane.ERROR_MESSAGE);
          LOGGER.log(Level.SEVERE, "Wrong backend version.");
          this.setVisible(true);
       }
    }//GEN-LAST:event_jButtonLoginActionPerformed

   public boolean doLogin(String username, String pw) throws CommunicationException,
           WrongBackendVersionException
   {
      parser.setUrl(HttpTk.generateAdmonUrl("/XML_GetNonce"));
      boolean updateSuccess = parser.update();
      if (!updateSuccess)
      {
         throw new CommunicationException("Communication error during requesting URL: " +
            HttpTk.generateAdmonUrl("/XML_GetNonce"));
      }

      TreeMap<String, String> data = parser.getTreeMap();
      int nonceID = Integer.parseInt(data.get("id"));
      long nonce = Long.parseLong(data.get("nonce"));

      String secret = CryptTk.cryptWithNonce(pw, nonce);

      String url = HttpTk.generateAdmonUrl("/XML_AuthInfo");
      String params = "?nonceID=" + nonceID;

      parser.setUrl(url + params);
      updateSuccess = parser.update();
      if (!updateSuccess)
      {
         throw new CommunicationException("Communication error during requesting URL: " + url);
      }

      data = parser.getTreeMap();
      String infoHash = data.get("info");
      String adminHash = data.get("admin");

      if (!Main.getConfig().getIgnoreVersionTest())
      {
         // check versions
         url = HttpTk.generateAdmonUrl("/XML_GetVersionString");
         parser.setUrl(url);
         updateSuccess = parser.update();
         if (!updateSuccess)
         {
            throw new CommunicationException("Communication error during requesting URL: " + url);
         }

         data = parser.getTreeMap();
         String backendVersion = data.get("version");
         if (!Main.getVersion().equals(backendVersion))
         {
            throw new WrongBackendVersionException();
         }
      }

      if ((username.equals("Administrator")) && (secret.equals(adminHash)))
      {
         Main.getSession().setIsAdmin(true);
         Container window = this.getParent();
         if (window instanceof MainWindow)
         {
            MainWindow mw = (MainWindow)window;
            mw.setLoggedIn(true);
            Main.getSession().setPw(pw);
            return true;
         }
         return false;
      }
      else
      if ((username.equals("Information")) && (secret.equals(infoHash)))
      {
         Main.getSession().setIsInfo(true);
         Container window = this.getParent();
         if (window instanceof MainWindow)
         {
            MainWindow mw = (MainWindow)window;
            mw.setLoggedIn();
            Main.getSession().setPw(pw);
            return true;
         }
         return false;
      }
      else
      {
         return false;
      }
   }

    private void jPasswordFieldPWActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPasswordFieldPWActionPerformed
       jButtonLoginActionPerformed(evt);
    }//GEN-LAST:event_jPasswordFieldPWActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
      parser.setUrl(HttpTk.generateAdmonUrl("/XML_PreAuthInfo"));
      boolean updateSuccess = parser.update();
      jPasswordFieldPW.setText("");
      jPasswordFieldPW.requestFocus();

      try
      {
         boolean infoAutologinDisabled = true;

         if (updateSuccess)
         {
            infoAutologinDisabled = Boolean.parseBoolean(parser.getValue("infoDisabled"));
         }

         Main.getSession().setInfoAutologinDisabled(infoAutologinDisabled);

         if (!infoAutologinDisabled)
         {
            Main.getSession().setIsInfo(true);
            Container window = this.getParent();
            if (window instanceof MainWindow)
            {
               MainWindow mw = (MainWindow) window;
               mw.setLoggedIn();
               Main.getSession().setPw("");
            }
         }
      }
      catch (CommunicationException e)
      {
         LOGGER.log(Level.SEVERE, "Communication Error", e);
      }

      if (!Main.getSession().getInfoAutologinDisabled())
      {
         this.dispose();
      }
    }//GEN-LAST:event_formComponentShown
   // Variables declaration - do not modify//GEN-BEGIN:variables
   private javax.swing.JButton jButtonLogin;
   private javax.swing.JComboBox<String> jComboBoxUser;
   private javax.swing.JLabel jLabelLogo;
   private javax.swing.JLabel jLabelPassword;
   private javax.swing.JLabel jLabelUsername;
   private javax.swing.JPanel jPanelDialog;
   private javax.swing.JPasswordField jPasswordFieldPW;
   // End of variables declaration//GEN-END:variables
}
