#!/bin/bash

# License: BeeGFS EULA

print_usage()
{
	echo
	echo "DESCRIPTION: Check if all BeeGFS servers are reachable from this host."
	echo "             (This is a wrapper for beegfs-ctl.)"
	echo
	echo "USAGE: `basename $0` [options]"
	echo
	echo "   (default) - If no command line argument is given, check servers based on"
	echo "               default client config file."
	echo
	echo "   -h        - Print this help."
	echo
	echo "   -p <path> - Check servers for the given BeeGFS mount point."
	echo
	echo "   -c <path> - Check servers for the given BeeGFS client config file."
	echo
}

# @param $line is the server name.
# @stdin one line from stdin to find out whether server is reachable or not,
#        next line to get route info.
print_server()
{
	read reach
	read route

	stripped_route=`echo $route | sed "s/Route: //"`

	echo $reach | grep "\<yes\>" > /dev/null
  
	if [ $? -eq 0 ]; then
		echo "$line: reachable at $stripped_route"
	else
		echo "$line: UNREACHABLE"
	fi
}

# @param1: complete output of "beegfs-ctl mode=listnodes check_reachability"
parse_output()
{
        # we strip the output here because librdma can taint the output with
        # warning messages
	strippedout=`echo "$1" | grep -B1 -A1 "Reachable:"`

	echo "$strippedout" | \
	while read line; do
		echo $line | grep "^\w" > /dev/null
		if [ $? -eq 0 ]; then
			print_server
		fi
	done 
}


################## end of function definitions ##############


# parse command line arguments

while getopts "hp:c:" opt; do
        case $opt in
	h)
		print_usage
		exit 0
		;;
	p)
		BEEGFS_PATH_ARG="--mount=$OPTARG"
		;;
	c)
		BEEGFS_PATH_ARG="--cfgFile=$OPTARG"
		;;
        *)
		echo "Invalid option: -$OPTARG" >&2
		print_usage
		exit 1
		;;
	esac
done

# call beegfs-ctl reachability check for each server type

for type in Management Metadata Storage; do
	echo $type
	echo ==========
	out=`beegfs-ctl --listnodes --reachable --route --nodetype=$type $BEEGFS_PATH_ARG`
	if [ $? -eq 0 ]; then
		parse_output "$out"
	else
		echo "$out" >&2
		exit 1;
	fi
	echo
done

